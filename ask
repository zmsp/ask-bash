#!/bin/bash

set -euo pipefail

KEY_FILE="$HOME/.openai_api_key"
MODEL="gpt-4.1-nano"
MAX_TOKENS=100

show_help() {
cat <<EOF
Usage: $(basename "$0") [description of the bash task]

This script uses OpenAI's API to generate a bash command for the task you describe.
It prints the suggested command and optionally runs it if you confirm.

Options:
  -h, --help         Show this help message and exit

Environment Variables:
  OPENAI_API_KEY     Required. Your OpenAI API key. You can set it like this:
                       export OPENAI_API_KEY=your_api_key_here
                     If not set, the script will prompt you once and save it to ~/.openai_api_key.

  VERBOSE=true       Optional. Enables interactive debug output.

Examples:
  $(basename "$0") "list all files in /tmp modified in the last 24 hours"
  $(basename "$0") "restart nginx service if it's not running"

EOF
}

if [[ $# -eq 0 || "$1" == "-h" || "$1" == "--help" ]]; then
    show_help
    exit 0
fi

if [[ -z "${OPENAI_API_KEY:-}" && -f "$KEY_FILE" ]]; then
    OPENAI_API_KEY=$(<"$KEY_FILE")
fi

if [[ -z "${OPENAI_API_KEY:-}" ]]; then
    echo "⚠️  OPENAI_API_KEY not found."
    read -s -p "Paste your OpenAI API key: " OPENAI_API_KEY
    echo
    if [[ -n "$OPENAI_API_KEY" ]]; then
        echo "$OPENAI_API_KEY" > "$KEY_FILE"
        chmod 600 "$KEY_FILE"
        echo "✅ API key saved to $KEY_FILE"
    else
        echo "❌ API key not provided. Exiting."
        exit 1
    fi
fi

prompt="Only output the bash command to: $*"

if [[ "${VERBOSE:-}" == "true" ]]; then
    echo "[Verbose] Constructed prompt:"
    echo "  $prompt"
    read -p "Show full prompt JSON payload? (y/n): " show_payload
else
    show_payload="n"
fi

json_payload=$(jq -n \
  --arg model "$MODEL" \
  --arg prompt "$prompt" \
  --argjson max_tokens "$MAX_TOKENS" \
  '{
    model: $model,
    messages: [{role: "user", content: $prompt}],
    temperature: 0,
    max_tokens: $max_tokens
  }'
)

if [[ "$show_payload" =~ ^[Yy]$ ]]; then
    echo "[Verbose] JSON payload sent to API:"
    echo "$json_payload"
fi

response=$(curl -sS https://api.openai.com/v1/chat/completions \
  -H "Authorization: Bearer $OPENAI_API_KEY" \
  -H "Content-Type: application/json" \
  -d "$json_payload"
)

if [[ "${VERBOSE:-}" == "true" ]]; then
    echo "[Verbose] Raw API response preview:"
    echo "$response" | head -n 10
    read -p "Show full API response? (y/n): " show_full_response
    if [[ "$show_full_response" =~ ^[Yy]$ ]]; then
        echo "$response"
    fi
fi

command=$(echo "$response" | jq -r '.choices[0].message.content // empty' | sed '/^```/d')

if [[ -z "$command" ]]; then
    echo "❌ Failed to get a valid response. Full output:"
    echo "$response"
    exit 1
fi

echo -e "\nSuggested command:\n$command"

read -p "Run this command? (y/n): " confirm
if [[ "$confirm" =~ ^[Yy]$ ]]; then
    echo "Running... $command"
    eval "$command"
else
    echo "Cancelled."
fi
